{"version":3,"file":"static/js/7517.5a933ce9.chunk.js","mappings":"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","sources":["components/HR/UpperNav/UpperNav.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./UpperNav.css\";\r\nimport { Suspense } from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { FaRegBell } from \"react-icons/fa\";\r\nimport { GoDotFill } from \"react-icons/go\";\r\nimport { FaRegUser } from \"react-icons/fa\";\r\nimport { IoIosArrowDown } from \"react-icons/io\";\r\nimport { IoIosArrowUp } from \"react-icons/io\";\r\n\r\nimport Logout from \"../../../Logout\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\n\r\nimport Snackbars from \"../../SnackBar\";\r\n\r\nimport {\r\n  useAdminChangePasswordByIdMutation,\r\n  useAdminUpdateByIdMutation,\r\n} from \"../../../Store/Services/AdminService\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { updateAdminChange } from \"../../../Store/Slices/AdminSlice\";\r\n\r\nexport default function UpperNav() {\r\n  const dispatch = useDispatch();\r\n  const { Admins, adminLoggedIn, adminLoggedInData, adminRole } = useSelector(\r\n    (state) => state.AdminState\r\n  );\r\n\r\n  const [adminChangePasswordById, responseAdminChangePasswordById] =\r\n    useAdminChangePasswordByIdMutation();\r\n\r\n  const [adminUpdateById, responseAdminUpdateById] =\r\n    useAdminUpdateByIdMutation();\r\n\r\n  console.log(responseAdminChangePasswordById);\r\n\r\n  const [adminName, setAdminName] = useState(\"\");\r\n  const [adminEmail, setAdminEmail] = useState(\"\");\r\n  const [adminOldPassword, setAdminOldPassword] = useState(\"\");\r\n  const [adminPassword, setAdminPassword] = useState(\"\");\r\n\r\n  const [showProfileDropdown, setShowProfileDropdown] = useState(false);\r\n\r\n  const [openProfileModal, setOpenProfileModal] = React.useState(false);\r\n  const handleOpenProfileModal = () => {\r\n    setAdminName(adminLoggedInData?.adminName);\r\n    setAdminEmail(adminLoggedInData?.adminEmail);\r\n    setOpenProfileModal(true);\r\n  };\r\n  const handleCloseProfileModal = () => setOpenProfileModal(false);\r\n\r\n  const [openChangePasswordModal, setOpenChangePasswordModal] =\r\n    React.useState(false);\r\n  const handleOpenChangePasswordModal = () => setOpenChangePasswordModal(true);\r\n  const handleCloseChangePasswordModal = () =>\r\n    setOpenChangePasswordModal(false);\r\n\r\n  // console.log(adminRole);\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"60%\",\r\n    bgcolor: \"background.paper\",\r\n    borderRadius: \"8px\",\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n  };\r\n\r\n  // Snackbar--------------------\r\n  // ----Succcess\r\n  const [openSnackbarSuccess, setOpenSnackBarSuccess] = React.useState(false);\r\n  const [snackBarMessageSuccess, setSnackBarSuccessMessage] =\r\n    React.useState(\"\");\r\n\r\n  const handleClickSnackbarSuccess = () => {\r\n    setOpenSnackBarSuccess(true);\r\n  };\r\n  // ----Warning\r\n  const [openSnackbarWarning, setOpenSnackBarWarning] = React.useState(false);\r\n  const [snackBarMessageWarning, setSnackBarSuccessWarning] =\r\n    React.useState(\"\");\r\n\r\n  const handleClickSnackbarWarning = () => {\r\n    setOpenSnackBarWarning(true);\r\n  };\r\n  // ----------------------------\r\n\r\n  useEffect(() => {\r\n    if (responseAdminUpdateById.isSuccess) {\r\n      setSnackBarSuccessMessage(responseAdminUpdateById?.data?.message);\r\n      handleClickSnackbarSuccess();\r\n      handleCloseProfileModal();\r\n      dispatch(updateAdminChange(Math.random()));\r\n    } else if (responseAdminUpdateById.isError) {\r\n      setSnackBarSuccessWarning(responseAdminUpdateById?.error?.data);\r\n      handleClickSnackbarWarning();\r\n    }\r\n  }, [responseAdminUpdateById.isSuccess, responseAdminUpdateById.isError]);\r\n\r\n  const handleProfileChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    adminUpdateById({\r\n      id: adminLoggedInData?.adminId,\r\n      data: {\r\n        adminName: adminName,\r\n        adminPassword: \"\",\r\n        adminRole: adminLoggedInData?.adminRole,\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (responseAdminChangePasswordById.isSuccess) {\r\n      setSnackBarSuccessMessage(responseAdminChangePasswordById?.data?.message);\r\n      handleClickSnackbarSuccess();\r\n      handleCloseChangePasswordModal();\r\n      dispatch(updateAdminChange(Math.random()));\r\n    } else if (responseAdminChangePasswordById.isError) {\r\n      setSnackBarSuccessWarning(responseAdminChangePasswordById?.error?.data);\r\n      handleClickSnackbarWarning();\r\n    }\r\n  }, [\r\n    responseAdminChangePasswordById.isSuccess,\r\n    responseAdminChangePasswordById.isError,\r\n  ]);\r\n\r\n  const handleChangePassword = (e) => {\r\n    e.preventDefault();\r\n\r\n    adminChangePasswordById({\r\n      id: adminLoggedInData?.adminId,\r\n      data: {\r\n        adminOldPassword: adminOldPassword,\r\n        adminPassword: adminPassword,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Suspense fallback={<>...</>}>\r\n        <div className='flex flex-row w-full items-center border-b-[1px] border-b-solid relative'>\r\n          <div className='flex p-[1.5rem] w-[70%]'>\r\n            <div className='px-[10px] w-[90%] bg-[#E7EFFF] flex flex-row items-center gap-[10px] rounded-[8px]'>\r\n              <FaSearch className='text-[#636D73]' />\r\n              <input\r\n                className='w-full outline-none py-[10px] bg-transparent'\r\n                placeholder='Search'\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='w-[30%] flex gap-[1rem] items-center pr-[1rem]'>\r\n            <div className='flex relative cursor-pointer'>\r\n              <div className='p-[6px] rounded-md shadow-md w-fit h-fit'>\r\n                <FaRegBell className='text-[25px] text-[#2662F0]' />\r\n              </div>\r\n\r\n              <GoDotFill className='text-[#FDCA40] absolute right-0' />\r\n            </div>\r\n            {/* <img\r\n              src={userImage}\r\n              alt='userImage'\r\n              className='w-[50px] h-[50px]'\r\n            /> */}\r\n            <FaRegUser className='text-[35px] bg-[#3497F9] text-white p-[4px] rounded-full' />\r\n            <div\r\n              className='flex flex-col items-start text-[#414D55] cursor-pointer select-none'\r\n              onClick={() => setShowProfileDropdown(!showProfileDropdown)}>\r\n              <p className='font-[500] text-[14px]'>\r\n                {adminLoggedInData?.adminName}\r\n              </p>\r\n              <p>{adminLoggedInData?.adminRole}</p>\r\n            </div>\r\n            {showProfileDropdown ? (\r\n              <IoIosArrowUp\r\n                className='cursor-pointer'\r\n                onClick={() => setShowProfileDropdown(!showProfileDropdown)}\r\n              />\r\n            ) : (\r\n              <IoIosArrowDown\r\n                className='cursor-pointer'\r\n                onClick={() => setShowProfileDropdown(!showProfileDropdown)}\r\n              />\r\n            )}\r\n            {showProfileDropdown && (\r\n              <div className='absolute px-[3rem] top-[5rem] flex flex-col items-center z-10 fade-in'>\r\n                <div className='border-t-[20px] border-t-transparent w-fit border-b-[20px] border-b-[#3497F9] border-l-[20px] border-l-transparent border-r-[20px] border-r-transparent'></div>\r\n                <div className='bg-[#3497F9] px-[3rem] shadow-md py-[1rem] rounded-md flex flex-col items-start gap-[10px] w-fit'>\r\n                  <button\r\n                    onClick={handleOpenProfileModal}\r\n                    className='bg-white text-[14px] text-black p-[4px] rounded-md w-full'>\r\n                    My Profile\r\n                  </button>\r\n                  <button\r\n                    onClick={handleOpenChangePasswordModal}\r\n                    className='bg-white text-[14px] text-black p-[4px] rounded-md w-full'>\r\n                    Change Password\r\n                  </button>\r\n                  <Logout Style='bg-[#202020] text-[14px] text-white p-[4px] rounded-md w-full' />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          open={openProfileModal}\r\n          onClose={handleCloseProfileModal}\r\n          aria-labelledby='modal-modal-title'\r\n          aria-describedby='modal-modal-description'>\r\n          <Box sx={style}>\r\n            <Typography id='modal-modal-title' variant='h6' component='h2'>\r\n              <h1 className='headingBottomUnderline w-fit'>Edit Profile</h1>\r\n            </Typography>\r\n            <Typography id='modal-modal-description' sx={{ mt: 2 }}>\r\n              <form\r\n                className='flex flex-col gap-[1rem]'\r\n                onSubmit={handleProfileChange}>\r\n                <div className='grid grid-cols-2 gap-[1rem]'>\r\n                  <div className='flex flex-col gap-[10px]'>\r\n                    <label>Full Name</label>\r\n                    <input\r\n                      className='bg-[#F4F4F4] outline-none p-[1rem] rounded-[8px]'\r\n                      required\r\n                      type='text'\r\n                      placeholder='Enter full name'\r\n                      value={adminName}\r\n                      onChange={(e) => setAdminName(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  <div className='flex flex-col gap-[10px]'>\r\n                    <label>Email</label>\r\n                    <input\r\n                      className='bg-[#F4F4F4] outline-none p-[1rem] rounded-[8px]'\r\n                      disabled\r\n                      type='email'\r\n                      placeholder='Enter email'\r\n                      value={adminEmail}\r\n                      onChange={(e) => setAdminEmail(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <button type='submit' className='buttonFilled w-fit'>\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </Typography>\r\n          </Box>\r\n        </Modal>\r\n        <Modal\r\n          open={openChangePasswordModal}\r\n          onClose={handleCloseChangePasswordModal}\r\n          aria-labelledby='modal-modal-title'\r\n          aria-describedby='modal-modal-description'>\r\n          <Box sx={style}>\r\n            <Typography id='modal-modal-title' variant='h6' component='h2'>\r\n              <h1 className='headingBottomUnderline w-fit'>Change Password</h1>\r\n            </Typography>\r\n            <Typography id='modal-modal-description' sx={{ mt: 2 }}>\r\n              <form\r\n                className='flex flex-col gap-[1rem]'\r\n                onSubmit={handleChangePassword}>\r\n                <div className='grid grid-cols-2 gap-[1rem]'>\r\n                  <div className='flex flex-col gap-[10px]'>\r\n                    <label>Old Password</label>\r\n                    <input\r\n                      className='bg-[#F4F4F4] outline-none p-[1rem] rounded-[8px]'\r\n                      type='password'\r\n                      required\r\n                      placeholder='Enter old password'\r\n                      autoComplete='new-password'\r\n                      value={adminOldPassword}\r\n                      onChange={(e) => setAdminOldPassword(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  <div className='flex flex-col gap-[10px]'>\r\n                    <label>New Password</label>\r\n                    <input\r\n                      className='bg-[#F4F4F4] outline-none p-[1rem] rounded-[8px]'\r\n                      type='password'\r\n                      required\r\n                      placeholder='Enter new password'\r\n                      autoComplete='new-password'\r\n                      value={adminPassword}\r\n                      onChange={(e) => setAdminPassword(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <button type='submit' className='buttonFilled w-fit'>\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </Typography>\r\n          </Box>\r\n        </Modal>\r\n        <Snackbars\r\n          open={openSnackbarSuccess}\r\n          setOpen={setOpenSnackBarSuccess}\r\n          severity='success'\r\n          message={snackBarMessageSuccess}\r\n        />\r\n        {/* Warning Snackbar */}\r\n        <Snackbars\r\n          open={openSnackbarWarning}\r\n          setOpen={setOpenSnackBarWarning}\r\n          severity='warning'\r\n          message={snackBarMessageWarning}\r\n        />\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n"],"names":["UpperNav","dispatch","useDispatch","Admins","adminLoggedIn","adminLoggedInData","adminRole","useSelector","state","AdminState","adminChangePasswordById","responseAdminChangePasswordById","useAdminChangePasswordByIdMutation","adminUpdateById","responseAdminUpdateById","useAdminUpdateByIdMutation","console","log","adminName","setAdminName","useState","adminEmail","setAdminEmail","adminOldPassword","setAdminOldPassword","adminPassword","setAdminPassword","showProfileDropdown","setShowProfileDropdown","openProfileModal","setOpenProfileModal","React","handleCloseProfileModal","openChangePasswordModal","setOpenChangePasswordModal","handleCloseChangePasswordModal","style","position","top","left","transform","width","bgcolor","borderRadius","border","outline","boxShadow","p","openSnackbarSuccess","setOpenSnackBarSuccess","snackBarMessageSuccess","setSnackBarSuccessMessage","handleClickSnackbarSuccess","openSnackbarWarning","setOpenSnackBarWarning","snackBarMessageWarning","setSnackBarSuccessWarning","handleClickSnackbarWarning","useEffect","_responseAdminUpdateB","isSuccess","data","message","updateAdminChange","Math","random","isError","_responseAdminUpdateB2","error","_responseAdminChangeP","_responseAdminChangeP2","_jsx","_Fragment","children","_jsxs","Suspense","fallback","className","FaSearch","placeholder","FaRegBell","GoDotFill","FaRegUser","onClick","IoIosArrowUp","IoIosArrowDown","handleOpenProfileModal","handleOpenChangePasswordModal","Logout","Style","Modal","open","onClose","Box","sx","Typography","id","variant","component","mt","onSubmit","e","preventDefault","adminId","required","type","value","onChange","target","disabled","autoComplete","Snackbars","setOpen","severity"],"sourceRoot":""}