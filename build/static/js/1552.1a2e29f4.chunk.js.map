{"version":3,"file":"static/js/1552.1a2e29f4.chunk.js","mappings":"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","sources":["components/Table.js","components/superadmin/Departments/ManageBeds/ManageBeds.js"],"sourcesContent":["import { Fragment } from \"react\";\r\nimport PaginationComponent from \"./Pagination\";\r\nimport { useState } from \"react\";\r\n// import { CiMenuKebab } from 'react-icons/ci';\r\n\r\n// function Echo({children}) {    /// can be used instead of Fragment\r\n//     return children;\r\n// }\r\n\r\nfunction Table({ data, config, keyFn }) {\r\n  //Table Pagination\r\n  console.log(data, config, \"fgfgf\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  // ////////////////////////////////////////\r\n\r\n  const renderedHeaders = config?.map((column) => {\r\n    if (column.header) {\r\n      return <Fragment key={column?.label}>{column?.header()}</Fragment>;\r\n    }\r\n    return (\r\n      <th\r\n        className=\"text-center px-[4px] border-b-[1px] p-[10px]\"\r\n        key={column.label}\r\n      >\r\n        {column.label}\r\n      </th>\r\n    );\r\n  });\r\n\r\n  const renderedRows = data\r\n    ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n    ?.map((row, index) => {\r\n      // console.log(row, \"row\");\r\n      const renderedCells = config?.map((column, index) => {\r\n        // console.log(column, \"column\");\r\n        return (\r\n          <td\r\n            key={`column-${index}`}\r\n            className=\"justify-center text-[12px] py-4 px-[4px] text-center border-b-[1px]\"\r\n          >\r\n            {column?.render(row)}\r\n          </td>\r\n        );\r\n      });\r\n\r\n      return (\r\n        <tr className=\"\" key={keyFn(row)}>\r\n          {renderedCells}\r\n          {/* {\r\n            <div className=\"flex flex-row items-center justify-center\">\r\n              <CiMenuKebab\r\n                onClick={() => setActionBar(`${row.id}-${index}`)}\r\n                className=\"h-full w-fit\"\r\n              />\r\n              {actionBar ? (\r\n                <div className=\"flex flex-col bg-white p-[8px] shadow-md\">\r\n                  <p className=\"border-b\">Edit</p>\r\n                  <p className=\"\">Delete</p>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          } */}\r\n        </tr>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"w-full table-auto border-spacing-2 text-[#595959] font-[300]\">\r\n        <thead>\r\n          <tr className=\"border-b-[1px]\">{renderedHeaders}</tr>\r\n        </thead>\r\n        <tbody>{renderedRows}</tbody>\r\n      </table>\r\n      <PaginationComponent\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        handleChangePage={handleChangePage}\r\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n        data={data}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import { Suspense } from \"react\";\nimport { FaSearch } from \"react-icons/fa\";\nimport \"./ManageBeds.css\";\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\n// import Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\n\nimport { MdViewKanban } from \"react-icons/md\";\n\nimport { RiDeleteBin6Fill } from \"react-icons/ri\";\n\nimport Checkbox from \"@mui/material/Checkbox\";\n\nimport Table from \"../../../Table\";\n\nimport Snackbars from \"../../../SnackBar\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  useCreateBedMutation,\n  useDeleteBedByIdMutation,\n  useUpdateBedIsAppointmentApplicableMutation,\n} from \"../../../../Store/Services/BedService\";\nimport {\n  createBedChange,\n  updateBedsChange,\n  deleteBedsChange,\n} from \"../../../../Store/Slices/BedSlice\";\n\nexport default function ManageBeds({ setActivePage }) {\n  const dispatch = useDispatch();\n  const [createBed, responseCreateBed] = useCreateBedMutation();\n  const [\n    updateBedIsAppointmentApplicable,\n    responseUpdateBedIsAppointmentApplicable,\n  ] = useUpdateBedIsAppointmentApplicableMutation();\n  const [deleteBedById, responseDeleteBedById] = useDeleteBedByIdMutation();\n\n  const { beds } = useSelector((state) => state.BedState);\n\n  console.log(beds);\n\n  // Bed Variables\n  const bedTypes = [\n    { name: \"GENERAL\", subCategories: [\"HIGH \", \"JANATA\"] },\n    { name: \"SEMI-PRIVATE\" },\n    { name: \"PRIVATE\", subCategories: [\"SINGLE-AC\", \"SINGLE-AC-DLX\", \"SUITE\"] },\n    { name: \"EMERGENCY\" },\n  ];\n\n  const [bedNumber, setBedNumber] = React.useState(\"\");\n  const [bedTypeName, setBedTypeName] = React.useState(\"\");\n  const [bedSubTypeName, setBedSubTypeName] = React.useState(\"\");\n  const [bedFloor, setBedFloor] = React.useState(\"\");\n  const [isBedAvailable, setIsBedAvailable] = React.useState(true);\n  const [bedPrice, setBedPrice] = React.useState(\"\");\n\n  const [isFormValid, setIsFormValid] = React.useState(false);\n\n  const [nursingCharges, setNursingCharges] = React.useState(\"\");\n  const [emoCharges, setEmoCharges] = React.useState(\"\");\n  const [bioWasteCharges, setBioWasteCharges] = React.useState(\"\");\n  const [sanitizationCharges, setSanitizationCharges] = React.useState(\"\");\n\n  // console.log(\"bedPrice:\", bedPrice);\n\n  console.log(\"bedTypeName:\", bedTypeName);\n  console.log(\"bedSubTypeName:\", bedSubTypeName);\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"90%\",\n    height: \"90%\",\n    bgcolor: \"background.paper\",\n    borderRadius: \"12px\",\n    border: \"none\",\n    outline: \"none\",\n    boxShadow: 24,\n    p: 4,\n  };\n\n  // Snackbar--------------------\n  // ----Succcess\n  const [openSnackbarSuccess, setOpenSnackBarSuccess] = React.useState(false);\n  const [snackBarMessageSuccess, setSnackBarSuccessMessage] =\n    React.useState(\"\");\n\n  const handleClickSnackbarSuccess = () => {\n    setOpenSnackBarSuccess(true);\n  };\n  // ----Warning\n  const [openSnackbarWarning, setOpenSnackBarWarning] = React.useState(false);\n  const [snackBarMessageWarning, setSnackBarSuccessWarning] =\n    React.useState(\"\");\n\n  const handleClickSnackbarWarning = () => {\n    setOpenSnackBarWarning(true);\n  };\n  // ----------------------------\n\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => setOpen(false);\n\n  const [search, setSearch] = React.useState(\"\");\n\n  const filteredArray = beds?.filter((data) => {\n    if (search !== \"\") {\n      const userSearch = search.toLowerCase();\n      const searchInData = data?.bedId?.toLowerCase();\n\n      return searchInData?.startsWith(userSearch);\n    }\n    return data;\n  });\n\n  const mappedData = filteredArray?.map((data, index) => {\n    return {\n      tableid: index + 1,\n      data,\n    };\n  });\n\n  const config = [\n    {\n      label: \"S No.\",\n      render: (list) => list.tableid,\n    },\n    {\n      label: \"Bed No\",\n      render: (list) => list.data.bedNumber,\n    },\n    {\n      label: \"BED Floors\",\n      render: (list) => list.data.bedFloor,\n    },\n    {\n      label: \"BED Type\",\n      render: (list) => list.data.bedType,\n    },\n    {\n      label: \"BED Sub-Type\",\n      render: (list) => list.data.bedSubType,\n    },\n    {\n      label: \"BED Charges\",\n      render: (list) => list.data.bedCharges,\n    },\n    {\n      label: \"Nursing Charges\",\n      render: (list) => list.data.nursingCharges,\n    },\n    {\n      label: \"EMO Charges\",\n      render: (list) => list.data.EMOCharges,\n    },\n    {\n      label: \"Bio-Waste Charges\",\n      render: (list) => list.data.bioWasteCharges,\n    },\n    {\n      label: \"Sanitization Charges\",\n      render: (list) => list.data.sanitizationCharges,\n    },\n    {\n      label: \"Availability\",\n      render: (list) => (list.data.bedAvailableOrNot ? \"Available\" : \"Taken\"),\n    },\n    // {\n    //   label: \"Is Appointment Applicable\",\n    //   render: (list) => (\n    //     <Checkbox\n    //       onChange={(e) =>\n    //         updateBedIsAppointmentApplicable({\n    //           id: list.data.bedId,\n    //           data: { isAppointmentApplicable: e.target.checked },\n    //         })\n    //       }\n    //       defaultChecked={list.data.isAppointmentApplicable}\n    //     />\n    //   ),\n    // },\n    {\n      label: \"Action\",\n      render: (list) => (\n        <div className=\"flex gap-[10px] justify-center\">\n          <div\n            // onClick={() => handleOpenViewModal(list)}\n            className=\"p-[4px] h-fit w-fit border-[2px] border-[#96999C] rounded-[12px] cursor-pointer\"\n          >\n            <MdViewKanban className=\"text-[25px] text-[#96999C]\" />\n          </div>\n          {/* <div\n            onClick={() => handleOpenUpdateModal(list)}\n            className='p-[4px] h-fit w-fit border-[2px] border-[#3497F9] rounded-[12px] cursor-pointer'>\n            <RiEdit2Fill className='text-[25px] text-[#3497F9]' />\n          </div> */}\n          <div\n            // onClick={() => handleClickOpenDialogBox(list)}\n            onClick={() => deleteBedById(list.data.bedId)}\n            className=\"p-[4px] h-fit w-fit border-[2px] border-[#EB5757] rounded-[12px] cursor-pointer\"\n          >\n            <RiDeleteBin6Fill className=\"text-[25px] text-[#EB5757]\" />\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  const keyFn = (list) => {\n    return list.id;\n  };\n\n  React.useEffect(() => {\n    if (responseUpdateBedIsAppointmentApplicable.isSuccess) {\n      dispatch(updateBedsChange(Math.random()));\n      setSnackBarSuccessMessage(\n        responseUpdateBedIsAppointmentApplicable?.data?.message\n      );\n      handleClickSnackbarSuccess();\n    }\n  }, [responseUpdateBedIsAppointmentApplicable.isSuccess]);\n\n  React.useEffect(() => {\n    if (responseDeleteBedById.isSuccess) {\n      dispatch(deleteBedsChange(Math.random()));\n      setSnackBarSuccessMessage(responseDeleteBedById?.data?.message);\n      handleClickSnackbarSuccess();\n    }\n  }, [responseDeleteBedById.isSuccess]);\n\n  React.useEffect(() => {\n    if (responseCreateBed.isSuccess) {\n      dispatch(createBedChange(Math.random()));\n      setSnackBarSuccessMessage(responseCreateBed?.data?.message);\n      handleClickSnackbarSuccess();\n      setBedNumber(\"\");\n      setBedFloor(\"\");\n\n      setBedPrice(\"\");\n      setEmoCharges(\"\");\n      setNursingCharges(\"\");\n      setBioWasteCharges(\"\");\n      setSanitizationCharges(\"\");\n      setBedSubTypeName(\"\");\n      setBedTypeName(\"\");\n\n      setIsBedAvailable(true);\n      handleClose();\n    }\n  }, [responseCreateBed.isSuccess]);\n\n  const handleAddBed = (e) => {\n    e.preventDefault();\n\n    setIsFormValid(false);\n\n    const submitData = {\n      bedNumber: bedNumber,\n      bedType: bedTypeName,\n      bedSubType: bedSubTypeName,\n      bedCharges: bedPrice,\n      nursingCharges: nursingCharges,\n      EMOCharges: emoCharges,\n      bioWasteCharges: bioWasteCharges,\n      sanitizationCharges: sanitizationCharges,\n      bedFloor: bedFloor,\n      bedAvailableOrNot: isBedAvailable,\n    };\n    // console.log(\"submitData:\", submitData);\n    createBed(submitData);\n  };\n\n  const handleBedTypeChange = (e) => {\n    setBedTypeName(e.target.value);\n\n    // Reset bed sub-type if bed type changes\n    setBedSubTypeName(\"\");\n  };\n\n  const handleBedSubTypeChange = (e) => {\n    const selectedBedSubTypeName = e.target.value;\n    setBedSubTypeName(selectedBedSubTypeName);\n  };\n\n  React.useEffect(() => {\n    if (bedTypeName === \"GENERAL\" || bedTypeName === \"PRIVATE\") {\n      // Check if a valid bed sub-type is selected\n      setIsFormValid(bedSubTypeName !== \"\");\n    } else {\n      setIsFormValid(true);\n    }\n  }, [bedTypeName, bedSubTypeName]);\n\n  React.useEffect(() => {\n    setBedTypeName(\"\");\n    setBedSubTypeName(\"\");\n    setIsFormValid(false);\n  }, []);\n\n  return (\n    <Suspense fallback={<>...</>}>\n      <div className=\"flex flex-col gap-[1rem] p-[1rem]\">\n        <div className=\"flex justify-between\">\n          <div className=\"flex flex-row gap-[1rem]\">\n            <h3\n              onClick={() => setActivePage(\"Manage Department\")}\n              className=\"border-b-[4px] border-[#3497F9] opacity-50 cursor-pointer\"\n            >\n              Manage Department\n            </h3>\n            <h3\n              onClick={() => setActivePage(\"Floors Department\")}\n              className=\"border-b-[4px] border-[#3497F9] opacity-50 cursor-pointer\"\n            >\n              Floors Department\n            </h3>\n            <h3\n              onClick={() => setActivePage(\"Manage Ward\")}\n              className=\"border-b-[4px] border-[#3497F9] opacity-50 cursor-pointer\"\n            >\n              Manage Ward\n            </h3>\n            <h3\n              onClick={() => setActivePage(\"Manage BEDS\")}\n              className=\"border-b-[4px] border-[#3497F9] cursor-pointer\"\n            >\n              Manage BEDS\n            </h3>\n          </div>\n          <button\n            onClick={handleOpen}\n            className=\"bg-[#3497F9] text-white p-[10px] rounded-md\"\n          >\n            + Bed\n          </button>\n        </div>\n        <div className=\"flex justify-between\">\n          <div className=\"flex gap-[10px] bg-[#F4F6F6] items-center p-[10px] rounded-[18px]\">\n            <FaSearch className=\"text-[#56585A]\" />\n            <input\n              className=\"bg-transparent outline-none\"\n              placeholder=\"Search by bed id\"\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n          {/* <div className='flex gap-[10px] bg-[#F4F6F6] items-center p-[10px] rounded-[18px]'>\n              <input type='date' className='bg-transparent outline-none' />\n            </div> */}\n        </div>\n        <Table data={mappedData} config={config} keyFn={keyFn} />\n      </div>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            <h1 className=\"headingBottomUnderline w-fit pb-[10px]\">Add Beds</h1>\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            <div className=\"flex flex-col w-full text-[#3E454D] gap-[2rem] overflow-y-scroll px-[10px] pb-[2rem] h-[450px]\">\n              <form onSubmit={handleAddBed}>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">Bed Number</h3>\n                  <input\n                    type=\"number\"\n                    min={0}\n                    required\n                    onChange={(e) => setBedNumber(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">Bed Type*</h3>\n                  <select\n                    name=\"bedType\"\n                    id=\"bedType\"\n                    onChange={handleBedTypeChange}\n                    value={bedTypeName}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  >\n                    <option value=\"\">Select Bed Type</option>\n                    {bedTypes.map((bed, index) => (\n                      <option key={index} value={bed.name}>\n                        {bed.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                {bedTypes.find((bed) => bed.name === bedTypeName)?.subCategories\n                  ?.length > 0 && (\n                  <div className=\"flex items-center justify-between gap-[2rem]\">\n                    <h3 className=\"border-r w-[400px] py-[1rem]\">\n                      Bed Sub-Type*\n                    </h3>\n                    <select\n                      name=\"bedSubType\"\n                      id=\"bedSubType\"\n                      onChange={handleBedSubTypeChange}\n                      value={bedSubTypeName}\n                      className=\"border rounded-lg w-full p-[8px] outline-none\"\n                      disabled={!bedTypeName} // Disable until bed type is selected\n                    >\n                      <option value=\"\">Select Bed Sub-Type</option>\n                      {bedTypes\n                        .find((bed) => bed.name === bedTypeName)\n                        .subCategories?.map((bed, index) => (\n                          <option key={index} value={bed}>\n                            {bed}\n                          </option>\n                        ))}\n                    </select>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    Bed Charges ₹ *\n                  </h3>\n                  <input\n                    type=\"number\"\n                    min={0}\n                    defaultValue={0}\n                    required\n                    onChange={(e) => setBedPrice(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    Nursing Charges ₹ *\n                  </h3>\n                  <input\n                    type=\"number\"\n                    min={0}\n                    defaultValue={0}\n                    required\n                    onChange={(e) => setNursingCharges(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    EMO Charges ₹ *\n                  </h3>\n                  <input\n                    type=\"number\"\n                    min={0}\n                    defaultValue={0}\n                    required\n                    onChange={(e) => setEmoCharges(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    Bio-Waste Charges ₹ *\n                  </h3>\n                  <input\n                    type=\"number\"\n                    min={0}\n                    defaultValue={0}\n                    required\n                    onChange={(e) => setBioWasteCharges(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    Sanitization Charges ₹ *\n                  </h3>\n                  <input\n                    type=\"number\"\n                    min={0}\n                    defaultValue={0}\n                    required\n                    onChange={(e) => setSanitizationCharges(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">Bed Floor*</h3>\n                  <input\n                    type=\"text\"\n                    required\n                    onChange={(e) => setBedFloor(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    Availablility*\n                  </h3>\n                  <select\n                    name=\"bedType\"\n                    id=\"bedType\"\n                    onChange={(e) => setIsBedAvailable(e.target.value)}\n                    className=\"border rounded-lg w-full p-[8px] outline-none\"\n                  >\n                    <option value=\"true\">Available</option>\n                    <option value=\"false\">Not Available</option>\n                  </select>\n                </div>\n                {/* <div className=\"flex items-center justify-between gap-[2rem]\">\n                  <h3 className=\"border-r w-[400px] py-[1rem]\">\n                    Is Appointment Applicable\n                  </h3>\n                  <Checkbox\n                    className=\"w-full p-[8px]\"\n                    onChange={(e) =>\n                      setIsAppointmentApplicable(e.target.checked)\n                    }\n                    defaultChecked={false}\n                  />\n                </div> */}\n\n                <div className=\"py-[2rem]\">\n                  <button\n                    type=\"submit\"\n                    disabled={!isFormValid}\n                    className=\"buttonFilled\"\n                  >\n                    Update\n                  </button>\n                  {isFormValid === false && (\n                    <h2 className=\" text-red-500\">\n                      Please select Bed Type and Bed Sub-Type\n                    </h2>\n                  )}\n                </div>\n              </form>\n            </div>\n          </Typography>\n        </Box>\n      </Modal>\n      {/* Success Snackbar */}\n      <Snackbars\n        open={openSnackbarSuccess}\n        setOpen={setOpenSnackBarSuccess}\n        severity=\"success\"\n        message={snackBarMessageSuccess}\n      />\n      {/* Warning Snackbar */}\n      <Snackbars\n        open={openSnackbarWarning}\n        setOpen={setOpenSnackBarWarning}\n        severity=\"warning\"\n        message={snackBarMessageWarning}\n      />\n    </Suspense>\n  );\n}\n"],"names":["_ref","_data$slice","data","config","keyFn","console","log","page","setPage","useState","rowsPerPage","setRowsPerPage","renderedHeaders","map","column","header","_jsx","Fragment","children","label","className","renderedRows","slice","row","index","renderedCells","render","concat","_jsxs","PaginationComponent","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","ManageBeds","_bedTypes$find","_bedTypes$find$subCat","_bedTypes$find$subCat2","setActivePage","dispatch","useDispatch","createBed","responseCreateBed","useCreateBedMutation","updateBedIsAppointmentApplicable","responseUpdateBedIsAppointmentApplicable","useUpdateBedIsAppointmentApplicableMutation","deleteBedById","responseDeleteBedById","useDeleteBedByIdMutation","beds","useSelector","state","BedState","bedTypes","name","subCategories","bedNumber","setBedNumber","React","bedTypeName","setBedTypeName","bedSubTypeName","setBedSubTypeName","bedFloor","setBedFloor","isBedAvailable","setIsBedAvailable","bedPrice","setBedPrice","isFormValid","setIsFormValid","nursingCharges","setNursingCharges","emoCharges","setEmoCharges","bioWasteCharges","setBioWasteCharges","sanitizationCharges","setSanitizationCharges","openSnackbarSuccess","setOpenSnackBarSuccess","snackBarMessageSuccess","setSnackBarSuccessMessage","handleClickSnackbarSuccess","openSnackbarWarning","setOpenSnackBarWarning","snackBarMessageWarning","setSnackBarSuccessWarning","open","setOpen","handleClose","search","setSearch","filteredArray","filter","_data$bedId","userSearch","toLowerCase","searchInData","bedId","startsWith","mappedData","tableid","list","bedType","bedSubType","bedCharges","EMOCharges","bedAvailableOrNot","MdViewKanban","onClick","RiDeleteBin6Fill","_responseUpdateBedIsA","isSuccess","updateBedsChange","Math","random","message","_responseDeleteBedByI","deleteBedsChange","_responseCreateBed$da","createBedChange","Suspense","fallback","_Fragment","handleOpen","FaSearch","placeholder","onChange","e","Table","id","Modal","onClose","Box","sx","position","top","left","transform","width","height","bgcolor","borderRadius","border","outline","boxShadow","p","Typography","variant","component","mt","onSubmit","preventDefault","type","min","required","bed","find","length","selectedBedSubTypeName","disabled","defaultValue","Snackbars","severity"],"sourceRoot":""}