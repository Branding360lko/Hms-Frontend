{"version":3,"file":"static/js/2778.34e42fa6.chunk.js","mappings":"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","sources":["components/Receptionist/IPDPatientListTable/IPDPatientListTable.js"],"sourcesContent":["import \"./IPDPatientListTable.css\";\n\nimport { Suspense } from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\n\nimport { FaSearch } from \"react-icons/fa\";\nimport { MdViewKanban } from \"react-icons/md\";\nimport { RiEdit2Fill } from \"react-icons/ri\";\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport browserLinks from \"../../../browserlinks\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { GetAllDoctorsHandle } from \"../../../Store/Slices/DoctorSlice\";\nimport {\n  getAllIpdPatientsAssignedData,\n  getIpdPatientsFullDetailsData,\n} from \"../NurseApi\";\nimport { CiViewList } from \"react-icons/ci\";\nimport { Backdrop, Fade } from \"@mui/material\";\nimport style from \"../../../styling/styling\";\nimport img from \"../../../assets/20180125_001_1_.jpg\";\nimport PaginationComponent from \"../../Pagination\";\nexport default function IPDPatientList() {\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const { patients } = useSelector((state) => state.PatientState);\n  const [status, setStatus] = React.useState(\"\");\n\n  const [patientId, setPatientId] = React.useState(\"\");\n\n  const renderedPatientForDropdownPrescription = patients?.map((data) => {\n    return {\n      value: data.patientId,\n      label: `${data.patientId} / ${data.patientName}`,\n    };\n  });\n  const { adminUniqueId, adminLoggedInData } = useSelector(\n    (state) => state.AdminState\n  );\n  console.log(adminLoggedInData?.adminUniqueId, \"adminLoggedInData\");\n  const [patientName, setPatientName] = React.useState(\"\");\n  const [patientPhone, setPatientPhone] = React.useState(\"\");\n  const [patientFatherName, setPatientFatherName] = React.useState(\"\");\n  const [patientHusbandName, setPatientHusbandName] = React.useState(\"\");\n  const [patientDateOfBirth, setPatientDateOfBirth] = React.useState(\"\");\n  const [patientHeight, setPatientHeight] = React.useState(\"\");\n  const [patientWeight, setPatientWeight] = React.useState(\"\");\n  const [patientGender, setPatientGender] = React.useState(\"\");\n  const [patientBloodGroup, setPatientBloodGroup] = React.useState(\"\");\n  const [patientImage, setPatientImage] = React.useState();\n  const [visitTime, setVisitTime] = React.useState(\"\");\n  const [bloodPressure, setBloodPressure] = React.useState(\"\");\n  const [paymentMode, setPaymentMode] = React.useState(\"\");\n  const [standardCharge, setStandardCharge] = React.useState(\"\");\n  const [admittingDoctorDateTime, setAdmittingDoctorDateTime] =\n    React.useState(\"\");\n  const [additionalInfo, setAdditionalInfo] = React.useState(\"\");\n  const [note, setNote] = React.useState(\"\");\n  const dispatch = useDispatch();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  React.useEffect(() => {\n    if (patientId !== \"\") {\n      const patient = patients?.find(\n        (data) => data.patientId === patientId?.value\n      );\n      setPatientName(patient?.patientName);\n      setPatientPhone(patient?.patientPhone);\n      setPatientFatherName(patient?.patientFatherName);\n      setPatientHusbandName(patient?.patientHusbandName);\n      setPatientDateOfBirth(patient?.patientDateOfBirth);\n      setPatientHeight(patient?.patientHeight);\n      setPatientWeight(patient?.patientWeight);\n      setPatientGender(patient?.patientGender);\n      setPatientBloodGroup(patient?.patientBloodGroup);\n      setPatientImage(patient?.patientImage);\n    }\n  }, [patientId]);\n\n  const testData = [\n    {\n      id: `1`,\n      name: `test1`,\n    },\n    {\n      id: `2`,\n      name: `test2`,\n    },\n  ];\n\n  const [tests, setTests] = React.useState([]);\n\n  const [test, setTest] = React.useState({\n    value: testData[0].id,\n    label: testData[0].name,\n  });\n\n  const [prescriptions, setPrescriptions] = React.useState([]);\n\n  const handleAddInput = () => {\n    setPrescriptions([\n      ...prescriptions,\n      { medicineName: \"\", qty: \"\", times: \"\" },\n    ]);\n  };\n\n  const handleChange = (event, index) => {\n    let { name, value } = event.target;\n    let onChangeValue = [...prescriptions];\n    onChangeValue[index][name] = value;\n    setPrescriptions(onChangeValue);\n  };\n\n  const handleDeleteInput = (index) => {\n    const newArray = [...prescriptions];\n    newArray.splice(index, 1);\n    setPrescriptions(newArray);\n  };\n\n  const handleRemoveTestCard = (index) => {\n    const newArray = [...tests];\n    newArray.splice(index, 1);\n    setTests(newArray);\n  };\n\n  const handleChangeStatus = (event) => {\n    setStatus(event.target.value);\n  };\n\n  const [openUpdateModal, setOpenUpdateModal] = React.useState(false);\n  const handleOpenUpdateModal = (data) => {\n    setOpenUpdateModal(true);\n  };\n  const handleCloseUpdateModal = () => {\n    setOpenUpdateModal(false);\n  };\n\n  const handleUpdateIPDPatientSubscription = (e) => {\n    e.preventDefault();\n\n    const submitData = {\n      ipdPrescriptionPatientId: patientId?.value,\n      ipdPrescriptionVisitTime: visitTime,\n      ipdPrescriptionBloodPressure: bloodPressure,\n      ipdPrescriptionPaymentMode: paymentMode,\n      ipdPrescriptionStandardCharge: standardCharge,\n      ipdPrescriptionAdmittingDoctorDateTime: admittingDoctorDateTime,\n      ipdPrescriptionAdditionalInfo: additionalInfo,\n      ipdPrescriptionNote: note,\n      ipdPrescriptionPrescriptions: prescriptions,\n      ipdPrescriptionTests: tests,\n    };\n\n    console.log(submitData);\n  };\n\n  const date = (dateTime) => {\n    const newdate = new Date(dateTime);\n\n    const day = String(newdate.getDate()).padStart(2, \"0\");\n    const month = String(newdate.getMonth() + 1).padStart(2, \"0\"); // getMonth() is zero-based\n    const year = newdate.getFullYear();\n\n    return `${day}/${month}/${year}`;\n  };\n\n  const time = (dateTime) => {\n    const newDate = new Date(dateTime);\n\n    return newDate.toLocaleTimeString();\n  };\n\n  const [search, setSearch] = React.useState(\"\");\n  const [patientsData, setPatientsData] = React.useState([]);\n  const [filteredData, setFilteredData] = React.useState([]);\n\n  const mappedData = [\n    {\n      patientId: \"1\",\n      patientName: \"jgvjhc\",\n      patientEmail: \"patientEmailggdfg@jdkfsd.com\",\n      bedNo: \"2\",\n    },\n  ];\n\n  const config = [\n    {\n      label: \"IPD Bill No \",\n      render: (list) => list.patientId,\n    },\n    {\n      label: \"Patient Name\",\n      render: (list) => list.patientName,\n    },\n    {\n      label: \"Doctor Name\",\n      render: (list) => list.patientEmail,\n    },\n    {\n      label: \"TIme / Date\",\n      render: (list) => date(list.createdAt),\n    },\n    {\n      label: \"Doctor Visit Checked\",\n      render: (list) => list.bedNo,\n    },\n    // {\n    //   label: \"Status\",\n    //   render: (list) => (\n    //     <Box sx={{ minWidth: 100 }}>\n    //       <FormControl fullWidth>\n    //         <InputLabel id='demo-simple-select-label'>Status</InputLabel>\n    //         <Select\n    //           labelId='demo-simple-select-label'\n    //           id='demo-simple-select'\n    //           value={status}\n    //           label='Status'\n    //           onChange={handleChangeStatus}>\n    //           <MenuItem value={10}>Show</MenuItem>\n    //           <MenuItem value={20}>Hide</MenuItem>\n    //         </Select>\n    //       </FormControl>\n    //     </Box>\n    //   ),\n    // },\n    {\n      label: \"User Action\",\n      render: (list) => (\n        <div className=\"flex gap-[10px] justify-center\">\n          <div\n            // onClick={() => handleOpenViewModal(list)}\n            onClick={() =>\n              navigate(\n                `${\n                  browserLinks.receptionist.category\n                }/${browserLinks?.receptionist?.internalPages?.ipdPatientViewPage\n                  ?.split(\" \")\n                  .join(\"\")}/${list.patientId}`\n              )\n            }\n            className=\"p-[4px] h-fit w-fit border-[2px] border-[#96999C] rounded-[12px] cursor-pointer\"\n          >\n            <MdViewKanban className=\"text-[25px] text-[#96999C]\" />\n          </div>\n          <div\n            onClick={() => handleOpenUpdateModal(list)}\n            className=\"p-[4px] h-fit w-fit border-[2px] border-[#3497F9] rounded-[12px] cursor-pointer\"\n          >\n            <RiEdit2Fill className=\"text-[25px] text-[#3497F9]\" />\n          </div>\n          {/* <div\n            // onClick={() => handleClickOpenDialogBox(list)}\n            className='p-[4px] h-fit w-fit border-[2px] border-[#EB5757] rounded-[12px] cursor-pointer'>\n            <RiDeleteBin6Fill className='text-[25px] text-[#EB5757]' />\n          </div> */}\n        </div>\n      ),\n    },\n  ];\n\n  const keyFn = (list) => {\n    return list.patientName;\n  };\n  const [allIpdPatientsData, setAllIpdPatientsData] = React.useState([]);\n  const getAllIpdPatientsAssignedDataHandle = async () => {\n    const result = await getAllIpdPatientsAssignedData();\n    const filter = result?.data?.filter(\n      (item) => item?.ipdNurseId === adminLoggedInData?.adminUniqueId\n    );\n    setAllIpdPatientsData(filter && filter?.reverse());\n    setFilteredData(filter && filter);\n    console.log(filter, \"filter\");\n  };\n  const getIpdPatientsFullDetailsDataHandle = async (Id) => {\n    const result = await getIpdPatientsFullDetailsData(Id);\n    setPatientsData(result?.data?.data?.[0]);\n    console.log(result);\n  };\n  const searchHandle = () => {\n    const filter = allIpdPatientsData?.filter((item) => {\n      if (search != \"\") {\n        return item?.ipdPatientId?.toLowerCase().includes(search.toLowerCase());\n      }\n      return item;\n    });\n    setFilteredData(filter && filter);\n  };\n  React.useEffect(() => {\n    dispatch(GetAllDoctorsHandle());\n    getAllIpdPatientsAssignedDataHandle();\n  }, []);\n\n  React.useEffect(() => {\n    searchHandle();\n  }, [search]);\n  return (\n    <Suspense fallback={<>...</>}>\n      <div className=\"flex flex-col gap-[1rem] p-[1rem]\">\n        <div className=\"flex justify-between\">\n          <h2 className=\"border-b-[4px] border-[#3497F9]\">IPD Patient List</h2>\n          {/* <button\n            onClick={handleOpen}\n            className='bg-[#3497F9] text-white p-[10px] rounded-md'>\n            + Add Patient\n          </button> */}\n        </div>\n        <div className=\"flex justify-between\">\n          <div className=\"flex gap-[10px] bg-[#F4F6F6] items-center p-[10px] rounded-[18px]\">\n            <FaSearch className=\"text-[#56585A]\" />\n            <input\n              className=\"bg-transparent outline-none\"\n              placeholder=\"Search by patient id\"\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n          {/* <div className='flex gap-[10px] bg-[#F4F6F6] items-center p-[10px] rounded-[18px]'>\n            <input type='date' className='bg-transparent outline-none' />\n          </div> */}\n        </div>\n        <div className=\"w-full\">\n          <table className=\"w-full table-auto border-spacing-2 text-[#595959] font-[300]\">\n            <thead>\n              <th className=\"border-[1px] p-1 font-semibold\">\n                <p>S_N</p>\n              </th>\n              <th className=\"border-[1px] p-1 font-semibold\">\n                <p>Patient Uhid</p>\n              </th>\n              <th className=\"border-[1px] p-1 font-semibold\">\n                <p>Doctor Id</p>\n              </th>\n              <th className=\"border-[1px] p-1 font-semibold\">\n                <p>Ipd Admiited Date/TIme </p>\n              </th>\n\n              <th className=\"border-[1px] p-1 font-semibold\">\n                <p>Action</p>\n              </th>\n            </thead>\n\n            <tbody>\n              {filteredData\n                ?.filter((item) => item?.ipdPatientDischarged === false)\n                ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                ?.map((item, index) => (\n                  <tr key={index} className=\"border-b-[1px]\">\n                    <td className=\"justify-center text-[16px] py-4 px-[4px] text-center border-r\">\n                      {index + 1}\n                    </td>\n                    <td className=\"justify-center text-[16px] py-4 px-[4px] text-center border-r\">\n                      {\"Uhid\" + item?.ipdPatientId}\n                    </td>\n                    <td className=\"justify-center text-[16px] py-4 px-[4px] text-center border-r\">\n                      {item?.ipdDoctorId}\n                    </td>\n                    <td className=\"justify-center text-[16px] py-4 px-[4px] text-center border-r\">\n                      {date(item?.updatedAt)}-{time(item?.updatedAt)}\n                    </td>{\" \"}\n                    <td className=\"justify-center text-[16px] py-4 px-[4px] text-center  flex-row border-r\">\n                      <div className=\"flex gap-[10px] justify-center\">\n                        <div\n                          className=\"p-[4px] h-fit w-fit border-[2px] border-[#96999C] rounded-[12px] cursor-pointer\"\n                          onClick={() => [\n                            getIpdPatientsFullDetailsDataHandle(\n                              item?.ipdPatientId\n                            ),\n                            handleOpen(),\n                          ]}\n                        >\n                          <CiViewList className=\"text-[20px] text-[#96999C]\" />\n                        </div>{\" \"}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n          <PaginationComponent\n            page={page}\n            rowsPerPage={rowsPerPage}\n            handleChangePage={handleChangePage}\n            handleChangeRowsPerPage={handleChangeRowsPerPage}\n            data={filteredData}\n          />\n        </div>\n      </div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            timeout: 500,\n          },\n        }}\n      >\n        <Fade in={open}>\n          <Box sx={style}>\n            <Typography id=\"transition-modal-title\" variant=\"h6\" component=\"h2\">\n              Patient Details\n            </Typography>\n            <Typography id=\"transition-modal-description\" sx={{ mt: 2 }}>\n              <div className=\"flex pt-[10px] pb-[10px] gap-[10%]\">\n                <span>\n                  <img src={img} alt=\"patients \" className=\"w-[15rem] \" />\n                </span>\n                <div class=\"w-full grid grid-cols-2 gap-1\">\n                  <div className=\"flex gap-[10px]\">\n                    <span>Patients Uhid</span>:\n                    <p>{\"Uhid\" + patientsData?.PatientData?.[0]?.patientId}</p>\n                  </div>\n                  <div className=\"flex gap-[10px]\">\n                    <span>Patient Admission Date / Time</span>:\n                    <p>\n                      {date(patientsData?.updatedAt)}-\n                      {time(patientsData?.updatedAt)}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-[10px]\">\n                    <span>Name</span>:\n                    <p>{patientsData?.PatientData?.[0]?.patientName}</p>\n                  </div>\n                  <div className=\"flex gap-[10px]\">\n                    <span>Gender</span>:\n                    <p>{patientsData?.PatientData?.[0]?.patientGender}</p>\n                  </div>\n\n                  <div className=\"flex gap-[10px]\">\n                    <span>Age</span>:\n                    <p>{patientsData?.PatientData?.[0]?.patientAge}</p>\n                  </div>\n                  <div className=\"flex gap-[10px]\">\n                    <span>Patient Mobile Number</span>:\n                    <p>{patientsData?.PatientData?.[0]?.patientPhone}</p>\n                  </div>\n                  <div className=\"flex gap-[10px]\">\n                    <span>IPD NO</span>:<p>{patientsData?.ipdPatientId}</p>\n                  </div>\n                  <div className=\"flex gap-[10px]\">\n                    <span>Admitting Doctor Id</span>:\n                    <p>{patientsData?.ipdPatientId}</p>\n                  </div>\n                </div>\n              </div>\n            </Typography>\n          </Box>\n        </Fade>\n      </Modal>\n    </Suspense>\n  );\n}\n"],"names":["IPDPatientList","_filteredData$filter","_filteredData$filter$","_patientsData$Patient","_patientsData$Patient2","_patientsData$Patient3","_patientsData$Patient4","_patientsData$Patient5","_patientsData$Patient6","_patientsData$Patient7","_patientsData$Patient8","_patientsData$Patient9","_patientsData$Patient10","useNavigate","open","setOpen","React","patients","useSelector","state","PatientState","status","setStatus","patientId","setPatientId","adminUniqueId","adminLoggedInData","map","data","value","label","concat","patientName","AdminState","console","log","setPatientName","patientPhone","setPatientPhone","patientFatherName","setPatientFatherName","patientHusbandName","setPatientHusbandName","patientDateOfBirth","setPatientDateOfBirth","patientHeight","setPatientHeight","patientWeight","setPatientWeight","patientGender","setPatientGender","patientBloodGroup","setPatientBloodGroup","patientImage","setPatientImage","visitTime","setVisitTime","bloodPressure","setBloodPressure","paymentMode","setPaymentMode","standardCharge","setStandardCharge","admittingDoctorDateTime","setAdmittingDoctorDateTime","additionalInfo","setAdditionalInfo","note","setNote","dispatch","useDispatch","page","setPage","rowsPerPage","setRowsPerPage","patient","find","testData","id","name","tests","setTests","test","setTest","prescriptions","setPrescriptions","openUpdateModal","setOpenUpdateModal","date","dateTime","newdate","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","time","toLocaleTimeString","search","setSearch","patientsData","setPatientsData","filteredData","setFilteredData","allIpdPatientsData","setAllIpdPatientsData","getIpdPatientsFullDetailsDataHandle","async","_result$data2","_result$data2$data","result","getIpdPatientsFullDetailsData","Id","GetAllDoctorsHandle","_result$data","getAllIpdPatientsAssignedData","filter","item","ipdNurseId","reverse","getAllIpdPatientsAssignedDataHandle","searchHandle","_item$ipdPatientId","ipdPatientId","toLowerCase","includes","_jsxs","Suspense","fallback","_jsx","_Fragment","children","className","FaSearch","placeholder","onChange","e","target","ipdPatientDischarged","slice","index","ipdDoctorId","updatedAt","onClick","CiViewList","PaginationComponent","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","Modal","onClose","handleClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","Fade","in","Box","sx","style","Typography","variant","component","mt","src","img","alt","class","PatientData","patientAge"],"sourceRoot":""}