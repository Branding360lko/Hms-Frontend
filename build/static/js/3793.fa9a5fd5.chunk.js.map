{"version":3,"file":"static/js/3793.fa9a5fd5.chunk.js","mappings":"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","sources":["components/Nurse/AddPatientForm/AddPatientForm.js"],"sourcesContent":["import \"./AddPatientForm.css\";\nimport React, { useState, useRef, useMemo, useEffect } from \"react\";\nimport JoditEditor from \"jodit-react\";\nimport { Suspense } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport placeholder from \"../../../assets/imageplaceholder.png\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Snackbars from \"../../SnackBar\";\nimport { useAddPatientMutation } from \"../../../Store/Services/PatientService\";\nimport { createPatientChange } from \"../../../Store/Slices/PatientSlice\";\n\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\n\n// import Select from \"react-select\";\n\nexport default function AddPatientForm() {\n  const dispatch = useDispatch();\n  const [addPatient, responseAddPatient] = useAddPatientMutation();\n  // const editor = useRef(null);\n\n  const [loading, setLoading] = useState(false);\n  // const { doctors } = useSelector((state) => state.DoctorState);\n\n  // const config = useMemo(\n  //   () => ({\n  //     readonly: false,\n  //   }),\n  //   []\n  // );\n\n  const { adminLoggedInData } = useSelector((state) => state.AdminState);\n\n  const [patientId, setPatientId] = React.useState(\"\");\n  const [patientIdToDelete, setPatientIdToDelete] = React.useState(\"\");\n  const [patientData, setPatientData] = React.useState(\"\");\n\n  // states\n  const [patientName, setPatientName] = React.useState(\"\");\n  const [patientEmail, setPatientEmail] = React.useState(\"\");\n  const [patientFatherName, setPatientFatherName] = React.useState(\"\");\n  const [patientHusbandName, setPatientHusbandName] = React.useState(\"\");\n  // const [patientDateOfBirth, setPatientDateOfBirth] = React.useState({\n  //   startDate: new Date(),\n  // });\n  const [patientAge, setPatientAge] = React.useState(\"\");\n  const [patientPhone, setPatientPhone] = React.useState(\"\");\n  const [patientPhone2, setPatientPhone2] = React.useState(\"\");\n  const [patientHeight, setPatientHeight] = React.useState(\"\");\n  const [patientWeight, setPatientWeight] = React.useState(\"\");\n  const [patientBloodGroup, setPatientBloodGroup] = React.useState(\"\");\n  const [patientLocalAddress, setPatientLocalAddress] = React.useState(\"\");\n  const [patientPermanentAddress, setPatientPermanentAddress] =\n    React.useState(\"\");\n  const [patientCity, setPatientCity] = React.useState(\"\");\n  const [patientState, setPatientState] = React.useState(\"\");\n  const [patientCountry, setPatientCountry] = React.useState(\"\");\n  const [patientZipCode, setPatientZipCode] = React.useState(\"\");\n  const [patientImage, setPatientImage] = React.useState();\n  const [patientGender, setPatientGender] = React.useState(\"Female\");\n\n  const [sameAsLocalAddress, setSameAsLocalAddress] = React.useState(false);\n\n  React.useEffect(() => {\n    // console.log(sameAsLocalAddress);\n    if (sameAsLocalAddress === true) {\n      setPatientPermanentAddress(patientLocalAddress);\n    }\n  }, [sameAsLocalAddress, patientLocalAddress]);\n\n  // const [patientAdmitCategory, setPatientAdminCaetgory] =\n  //   React.useState(\"OPD Patient\");\n  // const [patientCase, setPatientCase] = React.useState(\"\");\n  // const [patientAdmittingDoctor, setPatientAdmittingDoctor] = React.useState({\n  //   value: \"\",\n  //   label: \"\",\n  // });\n  // const [patientVisitingDoctor, setPatientVisitingDoctor] = React.useState({\n  //   value: \"\",\n  //   label: \"\",\n  // });\n\n  const [submitButton, setSubmitButton] = React.useState(\"\");\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  // Snackbar--------------------\n  // ----Succcess\n  const [openSnackbarSuccess, setOpenSnackBarSuccess] = React.useState(false);\n  const [snackBarMessageSuccess, setSnackBarSuccessMessage] =\n    React.useState(\"\");\n\n  const handleClickSnackbarSuccess = () => {\n    setOpenSnackBarSuccess(true);\n  };\n  // ----Warning\n  const [openSnackbarWarning, setOpenSnackBarWarning] = React.useState(false);\n  const [snackBarMessageWarning, setSnackBarSuccessWarning] =\n    React.useState(\"\");\n\n  const handleClickSnackbarWarning = () => {\n    setOpenSnackBarWarning(true);\n  };\n  // ----------------------------\n\n  React.useEffect(() => {\n    if (responseAddPatient.isSuccess) {\n      dispatch(createPatientChange(Math.random()));\n      setSnackBarSuccessMessage(responseAddPatient?.data?.message);\n      handleClickSnackbarSuccess();\n\n      setPatientImage();\n      setPatientGender(\"Female\");\n      // setPatientCase(\"\");\n      setTimeout(() => {\n        setLoading(false);\n      }, [1000]);\n      reset();\n    } else if (responseAddPatient.isError) {\n      setSnackBarSuccessWarning(responseAddPatient?.error?.data?.error);\n      handleClickSnackbarWarning();\n      setTimeout(() => {\n        setLoading(false);\n      }, [1000]);\n    }\n  }, [responseAddPatient.isSuccess, responseAddPatient.isError]);\n\n  const handleAddPatient = (data) => {\n    const patientData = {\n      ...data,\n      patientGender,\n      patientImage,\n      patientPhone,\n      patientPhone2,\n      patientAge,\n      patientLocalAddress,\n      patientPermanentAddress,\n      // patientDateOfBirth,\n    };\n\n    const formData = new FormData();\n\n    formData.append(\"patientName\", patientData?.patientName);\n    formData.append(\"patientEmail\", patientData?.patientEmail);\n    formData.append(\"patientFatherName\", patientData?.patientFatherName);\n    formData.append(\"patientHusbandName\", patientData?.patientHusbandName);\n    // formData.append(\n    //   \"patientDateOfBirth\",\n    //   patientData?.patientDateOfBirth?.startDate\n    // );\n    formData.append(\"patientDateOfBirth\", \"NODATA\");\n    formData.append(\"patientAge\", patientData?.patientAge);\n    formData.append(\"patientPhone\", patientData?.patientPhone);\n    formData.append(\"patientPhone2\", patientData?.patientPhone2);\n    formData.append(\"patientHeight\", patientData?.patientHeight);\n    formData.append(\"patientWeight\", patientData?.patientWeight);\n    formData.append(\"patientGender\", patientData?.patientGender);\n    formData.append(\"patientBloodGroup\", patientData?.patientBloodGroup);\n    formData.append(\"patientLocalAddress\", patientData?.patientLocalAddress);\n    formData.append(\n      \"patientPermanentAddress\",\n      patientData?.patientPermanentAddress\n    );\n    formData.append(\"patientCity\", patientData?.patientCity);\n    formData.append(\"patientState\", patientData?.patientState);\n    formData.append(\"patientCountry\", patientData?.patientCountry);\n    formData.append(\"patientZipCode\", patientData?.patientZipCode);\n    formData.append(\"patientImage\", patientData?.patientImage);\n    formData.append(\n      \"createdBy\",\n      JSON.stringify({\n        email: adminLoggedInData?.adminEmail,\n        name: adminLoggedInData?.adminName,\n        role: adminLoggedInData?.adminRole,\n        id: adminLoggedInData?.adminId,\n      })\n    );\n    formData.append(\n      \"editedBy\",\n      JSON.stringify({\n        email: adminLoggedInData?.adminEmail,\n        name: adminLoggedInData?.adminName,\n        role: adminLoggedInData?.adminRole,\n        id: adminLoggedInData?.adminId,\n      })\n    );\n\n    addPatient(formData);\n    setLoading(true);\n  };\n\n  // const renderedAdmittingDoctorForDropdown = doctors?.map((data) => {\n  //   return {\n  //     value: data.doctorId,\n  //     label: `${data.doctorName} / ${data.doctorId}`,\n  //   };\n  // });\n\n  return (\n    <Suspense fallback={<>...</>}>\n      <>\n        <div className='flex flex-col gap-[1rem] p-[1rem]'>\n          <div className='flex justify-between'>\n            <h2 className='border-b-[4px] border-[#3497F9]'>Add New Patient</h2>\n          </div>\n          <div className='flex flex-col w-full text-[#3E454D] items-start text-start gap-[1rem] px-[10px] pb-[2rem]'>\n            {loading ? (\n              \"Loading...\"\n            ) : (\n              <form\n                className='flex flex-col gap-[1rem]'\n                onSubmit={handleSubmit(handleAddPatient)}>\n                <div className='grid grid-cols-3 gap-[2rem] border-b pb-[3rem]'>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Patients Name *</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      required\n                      placeholder='Enter patient name'\n                      {...register(\"patientName\", { required: true })}\n                    />\n                    {errors.patientName && (\n                      <span className='text-[red]'>This field is required</span>\n                    )}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Email</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='email'\n                      placeholder='Enter patient email'\n                      {...register(\"patientEmail\")}\n                    />\n                    {/* {errors.patientEmail && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Father Name</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter patient father name'\n                      {...register(\"patientFatherName\")}\n                    />\n                    {errors.patientFatherName && (\n                      <span className='text-[red]'>This field is required</span>\n                    )}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Husband Name</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter patient husband name'\n                      {...register(\"patientHusbandName\")}\n                    />\n                    {errors.patientHusbandName && (\n                      <span className='text-[red]'>This field is required</span>\n                    )}\n                  </div>\n                  {/* <div className='flex flex-col gap-[6px]'>\n            <label className='text-[14px]'>Date Of Birth *</label>\n            <DatePicker\n              className='py-[10px] outline-none border-b'\n              selected={patientDateOfBirth.startDate}\n              maxDate={new Date()}\n              onChange={(date) =>\n                setPatientDateOfBirth({\n                  startDate: date,\n                })\n              }\n            />\n            <input\n              className=\"py-[10px] outline-none border-b\"\n              type=\"date\"\n              required\n              {...register(\"patientDateOfBirth\", { required: true })}\n            />\n            {errors.patientDateOfBirth && (\n              <span className='text-[red]'>This field is required</span>\n            )}\n          </div> */}\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Age *</label>\n                    {/* <DatePicker\n              className=\"py-[10px] outline-none border-b\"\n              required\n              selected={patientDateOfBirth.startDate}\n              maxDate={new Date()}\n              onChange={(date) =>\n                setPatientDateOfBirth({\n                  startDate: date,\n                })\n              }\n            /> */}\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      // type='number'\n                      placeholder='Enter age'\n                      // {...register(\"patientAge\", { required: true })}\n                      required\n                      value={patientAge}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/\\D/g, \"\");\n                        setPatientAge(value);\n                      }}\n                    />\n                    {/* {errors.patientAge && (\n              <span className='text-[red]'>This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Phone *</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      // type='number'\n                      required\n                      minLength={10}\n                      maxLength={10}\n                      value={patientPhone}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/\\D/g, \"\");\n                        setPatientPhone(value);\n                      }}\n                      placeholder='Enter patient phone number'\n                      // {...register(\"patientPhone\", {\n                      //   required: true,\n                      //   minLength: 10,\n                      //   maxLength: 10,\n                      // })}\n                    />\n                    {/* {errors.patientPhone && (\n              <span className='text-[red]'>\n                This field is required with 10 digits\n              </span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>\n                      Phone Number of Attendent\n                    </label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      // type='number'\n                      // required\n                      minLength={10}\n                      maxLength={10}\n                      value={patientPhone2}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/\\D/g, \"\");\n                        setPatientPhone2(value);\n                      }}\n                      placeholder='Enter phone number of attendent'\n                      // {...register(\"patientPhone2\", {\n                      //   minLength: 10,\n                      //   maxLength: 10,\n                      // })}\n                    />\n                    {/* {errors.patientPhone2 && (\n              <span className='text-[red]'>\n                This field is required with 10 digits\n              </span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Height</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter height'\n                      {...register(\"patientHeight\")}\n                    />\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Weight</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter weight'\n                      {...register(\"patientWeight\")}\n                    />\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Patient Gender *</label>\n                    <RadioGroup\n                      aria-labelledby='demo-radio-buttons-group-label'\n                      value={patientGender}\n                      name='radio-buttons-group'\n                      onChange={(e) => setPatientGender(e.target.value)}\n                      sx={{ display: \"flex\", flexDirection: \"row\" }}>\n                      <FormControlLabel\n                        value='Female'\n                        control={<Radio />}\n                        label='Female'\n                      />\n                      <FormControlLabel\n                        value='Male'\n                        control={<Radio />}\n                        label='Male'\n                      />\n                      <FormControlLabel\n                        value='Other'\n                        control={<Radio />}\n                        label='Other'\n                      />\n                    </RadioGroup>\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Blood Group *</label>\n                    <select\n                      className='py-[11.5px] outline-none border-b bg-transparent'\n                      {...register(\"patientBloodGroup\", { required: true })}>\n                      <option>O positive</option>\n                      <option>O negative</option>\n                      <option>A positive</option>\n                      <option>A negative</option>\n                      <option>B positive</option>\n                      <option>B negative</option>\n                      <option>AB positive</option>\n                      <option>AB negative</option>\n                    </select>\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Patient Photo</label>\n                    <div className='flex flex-col gap-[1rem]'>\n                      <input\n                        type='file'\n                        accept='image/png, image/gif, image/jpeg'\n                        onChange={(e) => setPatientImage(e.target.files[0])}\n                      />\n\n                      <img\n                        className='object-contain w-[100px] h-[100px]'\n                        src={\n                          patientImage\n                            ? URL.createObjectURL(patientImage)\n                            : placeholder\n                        }\n                        alt='placeholderimg'\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <h3 className='border-b py-[1rem]'>Patient Address Details</h3>\n                <div className='grid grid-cols-2 gap-[2rem] border-b pb-[3rem]'>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Local Address</label>\n                    <textarea\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter patient local address'\n                      value={patientLocalAddress}\n                      // {...register(\"patientLocalAddress\")}\n                      onChange={(e) => setPatientLocalAddress(e.target.value)}\n                    />\n                    {/* {errors.patientLocalAddress && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <div className='flex gap-[1rem]'>\n                      <label className='text-[14px]'>Permanent Address</label>\n                      <div className='flex gap-[10px] items-center'>\n                        <input\n                          type='checkbox'\n                          onChange={(e) =>\n                            setSameAsLocalAddress(e.target.checked)\n                          }\n                        />\n                        <p className='text-[12px]'>Same as local address</p>\n                      </div>\n                    </div>\n                    <textarea\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      defaultValue={patientPermanentAddress}\n                      disabled={sameAsLocalAddress === true ? true : false}\n                      placeholder='Enter patient permanent address'\n                      // {...register(\"patientPermanentAddress\")}\n                      onChange={(e) =>\n                        setPatientPermanentAddress(e.target.value)\n                      }\n                    />\n                    {/* {errors.patientPermanentAddress && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>City</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter patient city'\n                      {...register(\"patientCity\")}\n                    />\n                    {/* {errors.patientCity && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>State</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter patient state'\n                      {...register(\"patientState\")}\n                    />\n                    {/* {errors.patientState && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Country</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='text'\n                      placeholder='Enter patient country'\n                      {...register(\"patientCountry\")}\n                    />\n                    {/* {errors.patientCountry && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                  <div className='flex flex-col gap-[6px]'>\n                    <label className='text-[14px]'>Zipcode</label>\n                    <input\n                      className='py-[10px] outline-none border-b'\n                      type='number'\n                      placeholder='Enter patient zipcode'\n                      {...register(\"patientZipCode\")}\n                    />\n                    {/* {errors.patientZipcode && (\n              <span className=\"text-[red]\">This field is required</span>\n            )} */}\n                  </div>\n                </div>\n                <div className='flex gap-[1rem] items-center'>\n                  <button\n                    type='submit'\n                    className='buttonFilled'>{`Save & Print >`}</button>\n                  <button className='buttonOutlined'>{`Save >`}</button>\n                </div>\n              </form>\n            )}\n          </div>\n        </div>\n        {/* Success Snackbar */}\n        <Snackbars\n          open={openSnackbarSuccess}\n          setOpen={setOpenSnackBarSuccess}\n          severity='success'\n          message={snackBarMessageSuccess}\n        />\n        {/* Warning Snackbar */}\n        <Snackbars\n          open={openSnackbarWarning}\n          setOpen={setOpenSnackBarWarning}\n          severity='warning'\n          message={snackBarMessageWarning}\n        />\n      </>\n    </Suspense>\n  );\n}\n"],"names":["AddPatientForm","dispatch","useDispatch","addPatient","responseAddPatient","useAddPatientMutation","loading","setLoading","useState","adminLoggedInData","useSelector","state","AdminState","patientId","setPatientId","React","patientIdToDelete","setPatientIdToDelete","patientData","setPatientData","patientName","setPatientName","patientEmail","setPatientEmail","patientFatherName","setPatientFatherName","patientHusbandName","setPatientHusbandName","patientAge","setPatientAge","patientPhone","setPatientPhone","patientPhone2","setPatientPhone2","patientHeight","setPatientHeight","patientWeight","setPatientWeight","patientBloodGroup","setPatientBloodGroup","patientLocalAddress","setPatientLocalAddress","patientPermanentAddress","setPatientPermanentAddress","patientCity","setPatientCity","patientState","setPatientState","patientCountry","setPatientCountry","patientZipCode","setPatientZipCode","patientImage","setPatientImage","patientGender","setPatientGender","sameAsLocalAddress","setSameAsLocalAddress","submitButton","setSubmitButton","register","handleSubmit","watch","reset","formState","errors","useForm","openSnackbarSuccess","setOpenSnackBarSuccess","snackBarMessageSuccess","setSnackBarSuccessMessage","openSnackbarWarning","setOpenSnackBarWarning","snackBarMessageWarning","setSnackBarSuccessWarning","_responseAddPatient$d","isSuccess","createPatientChange","Math","random","data","message","setTimeout","isError","_responseAddPatient$e","_responseAddPatient$e2","error","_jsx","Suspense","fallback","_Fragment","children","_jsxs","className","onSubmit","formData","FormData","append","JSON","stringify","email","adminEmail","name","adminName","role","adminRole","id","adminId","type","required","placeholder","value","onChange","e","target","replace","minLength","maxLength","RadioGroup","sx","display","flexDirection","FormControlLabel","control","Radio","label","accept","files","src","URL","createObjectURL","alt","checked","defaultValue","disabled","Snackbars","open","setOpen","severity"],"sourceRoot":""}