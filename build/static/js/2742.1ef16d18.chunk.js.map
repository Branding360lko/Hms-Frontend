{"version":3,"file":"static/js/2742.1ef16d18.chunk.js","mappings":"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","sources":["components/Receptionist/AddIPDPrescriptionForm/AddIPDPrescriptionForm.js"],"sourcesContent":["import \"./AddIPDPrescriptionForm.css\";\n\nimport Select from \"react-select\";\n\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\n\nimport placeholder from \"../../../assets/imageplaceholder.png\";\n\nimport * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function AddIPDPrescriptionForm() {\n  const { patients } = useSelector((state) => state.PatientState);\n  const { doctors } = useSelector((state) => state.DoctorState);\n  // const { wards } = useSelector((state) => state.WardState);\n\n  const [patientId, setPatientId] = React.useState(\"\");\n\n  const renderedPatientForDropdownPrescription = patients?.map((data) => {\n    return {\n      value: data.patientId,\n      label: `${data.patientId} / ${data.patientName}`,\n    };\n  });\n\n  const [patientName, setPatientName] = React.useState(\"\");\n  const [patientPhone, setPatientPhone] = React.useState(\"\");\n  const [patientFatherName, setPatientFatherName] = React.useState(\"\");\n  const [patientHusbandName, setPatientHusbandName] = React.useState(\"\");\n  const [patientDateOfBirth, setPatientDateOfBirth] = React.useState(\"\");\n  const [patientHeight, setPatientHeight] = React.useState(\"\");\n  const [patientWeight, setPatientWeight] = React.useState(\"\");\n  const [patientGender, setPatientGender] = React.useState(\"\");\n  const [patientBloodGroup, setPatientBloodGroup] = React.useState(\"\");\n  const [patientImage, setPatientImage] = React.useState();\n  const [visitTime, setVisitTime] = React.useState(\"\");\n  const [bloodPressure, setBloodPressure] = React.useState(\"\");\n  const [paymentMode, setPaymentMode] = React.useState(\"\");\n  const [standardCharge, setStandardCharge] = React.useState(\"\");\n  const [admittingDoctorDateTime, setAdmittingDoctorDateTime] =\n    React.useState(\"\");\n  const [additionalInfo, setAdditionalInfo] = React.useState(\"\");\n  const [note, setNote] = React.useState(\"\");\n\n  React.useEffect(() => {\n    if (patientId !== \"\") {\n      const patient = patients?.find(\n        (data) => data.patientId === patientId?.value\n      );\n      setPatientName(patient?.patientName);\n      setPatientPhone(patient?.patientPhone);\n      setPatientFatherName(patient?.patientFatherName);\n      setPatientHusbandName(patient?.patientHusbandName);\n      setPatientDateOfBirth(patient?.patientDateOfBirth);\n      setPatientHeight(patient?.patientHeight);\n      setPatientWeight(patient?.patientWeight);\n      setPatientGender(patient?.patientGender);\n      setPatientBloodGroup(patient?.patientBloodGroup);\n      setPatientImage(patient?.patientImage);\n    }\n  }, [patientId]);\n\n  // console.log(patients);\n  const testData = [\n    {\n      id: `1`,\n      name: `test1`,\n    },\n    {\n      id: `2`,\n      name: `test2`,\n    },\n  ];\n\n  const [tests, setTests] = React.useState([]);\n\n  const [test, setTest] = React.useState({\n    value: testData[0].id,\n    label: testData[0].name,\n  });\n\n  const [prescriptions, setPrescriptions] = React.useState([]);\n\n  const handleAddInput = () => {\n    setPrescriptions([\n      ...prescriptions,\n      { medicineName: \"\", qty: \"\", times: \"\" },\n    ]);\n  };\n\n  const handleChange = (event, index) => {\n    let { name, value } = event.target;\n    let onChangeValue = [...prescriptions];\n    onChangeValue[index][name] = value;\n    setPrescriptions(onChangeValue);\n  };\n\n  const handleDeleteInput = (index) => {\n    const newArray = [...prescriptions];\n    newArray.splice(index, 1);\n    setPrescriptions(newArray);\n  };\n\n  const handleRemoveTestCard = (index) => {\n    const newArray = [...tests];\n    newArray.splice(index, 1);\n    setTests(newArray);\n  };\n\n  // console.log(tests);\n\n  const handleAddIPDPatientSubscription = (e) => {\n    e.preventDefault();\n\n    const submitData = {\n      ipdPrescriptionPatientId: patientId?.value,\n      ipdPrescriptionVisitTime: visitTime,\n      ipdPrescriptionBloodPressure: bloodPressure,\n      ipdPrescriptionPaymentMode: paymentMode,\n      ipdPrescriptionStandardCharge: standardCharge,\n      ipdPrescriptionAdmittingDoctorDateTime: admittingDoctorDateTime,\n      ipdPrescriptionAdditionalInfo: additionalInfo,\n      ipdPrescriptionNote: note,\n      ipdPrescriptionPrescriptions: prescriptions,\n      ipdPrescriptionTests: tests,\n    };\n\n    console.log(submitData);\n  };\n\n  return (\n    <div className='p-[1rem] flex flex-col gap-[1rem]'>\n      <div className='border-b pb-[2rem]'>\n        <h2 className='headingBottomUnderline w-fit'>Patient Information</h2>\n      </div>\n\n      <form onSubmit={handleAddIPDPatientSubscription}>\n        <div className='grid grid-cols-3 gap-[2rem] pb-[3rem]'>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Patient Registration No</label>\n            <Select\n              className='text-[12px] w-full'\n              required\n              options={renderedPatientForDropdownPrescription}\n              onChange={setPatientId}\n              value={patientId}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Patient Name</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientName}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Phone</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientPhone}\n              //   value={billingPatientName}\n              //   onChange={(e) => setBillingPatientName(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Father's Name</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientFatherName}\n              //   value={billingPatientName}\n              //   onChange={(e) => setBillingPatientName(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Husband's Name</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientHusbandName}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Date Of Birth</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientDateOfBirth}\n            />\n          </div>\n\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Height / Weight</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={`${patientHeight} / ${patientWeight}`}\n            />\n          </div>\n\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Patient Gender</label>\n            {/* <RadioGroup\n          aria-labelledby='demo-radio-buttons-group-label'\n          // value={patientGender}\n          name='radio-buttons-group'\n          // onChange={(e) => setPatientGender(e.target.value)}\n          sx={{ display: \"flex\", flexDirection: \"row\" }}>\n          <FormControlLabel\n            value='Female'\n            control={<Radio />}\n            label='Female'\n          />\n          <FormControlLabel value='Male' control={<Radio />} label='Male' />\n          <FormControlLabel\n            value='Other'\n            control={<Radio />}\n            label='Other'\n          />\n        </RadioGroup> */}\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientGender}\n              //   onChange={(e) => setBillingPatientName(e.target.value)}\n            />\n          </div>\n\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Blood Group</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              required\n              disabled\n              value={patientBloodGroup}\n              //   onChange={(e) => setBillingPatientName(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Profile Image</label>\n            <img\n              className='w-[100px] h-[100px] object-contain'\n              src={\n                patientImage\n                  ? process.env.React_App_Base_Image_Url + patientImage\n                  : placeholder\n              }\n              // src={placeholder}\n              alt='patientImage'\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Doctor Visited</label>\n            <select\n              required\n              className='py-[10px] outline-none border-b bg-transparent'>\n              <option>No</option>\n              <option>Yes</option>\n            </select>\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Doctor Visit Time</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='datetime-local'\n              onChange={(e) => setVisitTime(e.target.value)}\n            />\n          </div>\n          {/* <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Blood Pressure</label>\n\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              placeholder='Enter blood pressure'\n              value={bloodPressure}\n              onChange={(e) => setBloodPressure(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Payment Mode</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='text'\n              placeholder='Enter payment mode'\n              value={paymentMode}\n              onChange={(e) => setPaymentMode(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Standard Charge</label>\n            <input\n              className='py-[10px] outline-none border-b w-full'\n              type='number'\n              placeholder='Enter standard charge'\n              value={standardCharge}\n              onChange={(e) => setStandardCharge(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Doctor</label>\n\n            <Select\n              className='text-[12px] w-full'\n              required\n              options={renderedDoctorForDropdownPrescription}\n              onChange={setDoctorId}\n              value={doctorId}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Admitting Doctor Date / Time</label>\n            <input\n              type='datetime-local'\n              className='py-[10px] outline-none border-b w-full'\n              onChange={(e) => setAdmittingDoctorDateTime(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Case</label>\n            <Select\n              className='text-[12px] w-full'\n              required\n              options={renderedCaseForDropdownPrescription}\n              onChange={setCaseId}\n              value={caseId}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Room No.</label>\n            <Select\n              className='text-[12px] w-full'\n              required\n              options={renderedRoomForDropdownPrescription}\n              onChange={setRoomId}\n              value={roomId}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Ward Room</label>\n            <Select\n              className='text-[12px] w-full'\n              required\n              options={renderedWardsForDropdownPrescription}\n              onChange={setWardId}\n              value={wardId}\n            />\n          </div> */}\n        </div>\n\n        <div className='flex flex-col gap-[2rem] border-b pb-[3rem]'>\n          {/* <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Additional Info</label>\n            <textarea\n              rows={5}\n              className='py-[10px] outline-none border rounded-lg w-full p-[1rem]'\n              type='text'\n              required\n              placeholder='Enter additional info'\n              value={additionalInfo}\n              onChange={(e) => setAdditionalInfo(e.target.value)}\n            />\n          </div> */}\n          <div className='flex flex-col items-start gap-[6px]'>\n            <label className='text-[14px]'>Note</label>\n            <textarea\n              rows={5}\n              className='py-[10px] outline-none border rounded-lg w-full p-[1rem]'\n              type='text'\n              required\n              placeholder='Enter notes'\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n            />\n          </div>\n          <div className='flex flex-col items-start gap-[10px]'>\n            <h2 className='border-b w-full text-start'>Prescription</h2>\n            <div className='border rounded-lg w-full p-[1rem] flex flex-col gap-[1rem]'>\n              <div className='flex flex-row items-center justify-between'>\n                <h2 className='text-start'>Add Consumables</h2>\n                <Button onClick={() => handleAddInput()}>ADD +</Button>\n              </div>\n\n              <table className='w-fit border rounded-lg'>\n                <tr className='flex flex-row w-full'>\n                  <th className='w-[80px] text-start border-b border-r py-[10px] px-[6px]'>\n                    S No.\n                  </th>\n                  <th className='w-[300px] text-start border-b border-r py-[10px] px-[6px]'>\n                    Name\n                  </th>\n                  <th className='w-[200px] text-start border-b border-r py-[10px] px-[6px]'>\n                    Qty\n                  </th>\n                  <th className='w-[200px] text-start border-b border-r py-[10px] px-[6px]'>\n                    How many time in day\n                  </th>\n                  <th className='text-start border-b border-r py-[10px] px-[6px]'>\n                    Action\n                  </th>\n                </tr>\n                {prescriptions.map((item, index) => (\n                  <tr key={index} className='flex flex-row w-full'>\n                    <td className='w-[80px] text-start border-b border-r py-[10px] px-[6px]'>\n                      <p>{index + 1}</p>\n                    </td>\n                    <td className='w-[300px] text-start border-b border-r py-[10px] px-[6px]'>\n                      <input\n                        name='medicineName'\n                        type='text'\n                        placeholder='Enter medicine name'\n                        className='w-full border'\n                        value={item.medicineName}\n                        onChange={(event) => handleChange(event, index)}\n                      />\n                    </td>\n                    <td className='w-[200px] text-start border-b border-r py-[10px] px-[6px]'>\n                      <input\n                        name='qty'\n                        type='text'\n                        placeholder='Enter quantity'\n                        className='w-full border'\n                        value={item.qty}\n                        onChange={(event) => handleChange(event, index)}\n                      />\n                    </td>\n                    <td className='w-[200px] text-start border-b border-r py-[10px] px-[6px]'>\n                      <input\n                        name='times'\n                        type='text'\n                        placeholder='Enter times'\n                        className='w-full border'\n                        value={item.times}\n                        onChange={(event) => handleChange(event, index)}\n                      />\n                    </td>\n                    <td className='py-[10px] px-[6px]'>\n                      <MdDeleteForever\n                        onClick={() => handleDeleteInput(index)}\n                        className='text-[red] cursor-pointer text-[20px]'\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </table>\n            </div>\n          </div>\n          <div className='flex flex-col items-start gap-[10px]'>\n            <h2 className='border-b w-full text-start'>Test</h2>\n            <div className='flex flex-row items-center w-full'>\n              <Select\n                className='text-[12px] w-[50%]'\n                options={testData?.map((data) => {\n                  return {\n                    value: data.id,\n                    label: data.name,\n                  };\n                })}\n                onChange={setTest}\n                value={test}\n              />\n              <Button\n                onClick={() =>\n                  setTests([\n                    ...tests,\n                    { testId: test.value, testName: test.label },\n                  ])\n                }>\n                ADD +\n              </Button>\n            </div>\n          </div>\n          <div className='grid grid-cols-6 gap-[1rem]'>\n            {tests?.map((data, index) => {\n              return (\n                <div\n                  key={`${index}-${data.testId}-${data.testName}`}\n                  className='border relative w-fit'>\n                  <p className='p-[1rem]'>{data.testName}</p>\n                  <p\n                    onClick={() => handleRemoveTestCard(index)}\n                    className='text-black font-[600] absolute right-[4px] top-0 cursor-pointer'>\n                    -\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className='w-fit py-[1rem]'>\n          <button className='buttonFilled' type='submit'>{`Save >`}</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n"],"names":["AddIPDPrescriptionForm","patients","useSelector","state","PatientState","doctors","DoctorState","patientId","setPatientId","React","renderedPatientForDropdownPrescription","map","data","value","label","concat","patientName","setPatientName","patientPhone","setPatientPhone","patientFatherName","setPatientFatherName","patientHusbandName","setPatientHusbandName","patientDateOfBirth","setPatientDateOfBirth","patientHeight","setPatientHeight","patientWeight","setPatientWeight","patientGender","setPatientGender","patientBloodGroup","setPatientBloodGroup","patientImage","setPatientImage","visitTime","setVisitTime","bloodPressure","setBloodPressure","paymentMode","setPaymentMode","standardCharge","setStandardCharge","admittingDoctorDateTime","setAdmittingDoctorDateTime","additionalInfo","setAdditionalInfo","note","setNote","patient","find","testData","id","name","tests","setTests","test","setTest","prescriptions","setPrescriptions","handleChange","event","index","target","onChangeValue","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","submitData","ipdPrescriptionPatientId","ipdPrescriptionVisitTime","ipdPrescriptionBloodPressure","ipdPrescriptionPaymentMode","ipdPrescriptionStandardCharge","ipdPrescriptionAdmittingDoctorDateTime","ipdPrescriptionAdditionalInfo","ipdPrescriptionNote","ipdPrescriptionPrescriptions","ipdPrescriptionTests","console","log","Select","required","options","onChange","type","disabled","src","process","placeholder","alt","rows","Button","onClick","medicineName","qty","times","item","MdDeleteForever","newArray","splice","handleDeleteInput","testId","testName","handleRemoveTestCard"],"sourceRoot":""}